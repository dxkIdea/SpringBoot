# LOG4J日志级别
#ALL	各级包括自定义级别
#DEBUG	指定细粒度信息事件是最有用的应用程序调试
#ERROR	错误事件可能仍然允许应用程序继续运行
#FATAL	指定非常严重的错误事件，这可能导致应用程序中止
#INFO	指定能够突出在粗粒度级别的应用程序运行情况的信息的消息
#OFF	这是最高等级，为了关闭日志记录
#TRACE	指定细粒度比DEBUG更低的信息事件
#WARN	指定具有潜在危害的情况
#ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF

# LOG4J配置
log4j.rootCategory=INFO, stdout, file, errorfile
log4j.category.cn.com.sinosoft.microservice=${logging.level.cn.com.sinosoft.microservice}, sinosoftmirco
log4j.logger.error=errorfile

# 控制台输出
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n

# root日志输出
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.file=logs/system.log
log4j.appender.file.DatePattern='.'yyyy-MM-dd
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n

# error日志输出
log4j.appender.errorfile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.errorfile.file=logs/error.log
log4j.appender.errorfile.DatePattern='.'yyyy-MM-dd
log4j.appender.errorfile.Threshold = ERROR
log4j.appender.errorfile.layout=org.apache.log4j.PatternLayout
log4j.appender.errorfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n

# cn.com.sinosoft.microservice下的日志输出
log4j.appender.sinosoftmirco=org.apache.log4j.DailyRollingFileAppender
log4j.appender.sinosoftmirco.file=logs/eureka_server.log
log4j.appender.sinosoftmirco.DatePattern='.'yyyy-MM-dd
log4j.appender.sinosoftmirco.layout=org.apache.log4j.PatternLayout
log4j.appender.sinosoftmirco.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L ---- %m%n

#Project defalult level
logging.level.cn.com.sinosoft.microservice=INFO





